
/*
Test suite for node AND browser in one file
So, we are need some data from global
Its so wrong, but its OK for test
 */

(function() {
  var extend, lib_path;

  lib_path = (typeof GLOBAL !== "undefined" && GLOBAL !== null ? GLOBAL.lib_path : void 0) || '';

  extend = require("" + lib_path + "whet.extend");

  describe('whet.extend:', function() {
    var arr, date, deep, int, obj, str;
    str = int = arr = date = obj = deep = null;
    beforeEach(function() {
      str = 'me a test';
      int = 10;
      arr = [1, 'what', new Date(81, 8, 4)];
      date = new Date(81, 4, 13);
      obj = {
        str: str,
        int: int,
        arr: arr,
        date: date
      };
      return deep = {
        ori: obj,
        layer: {
          int: 10,
          str: 'str',
          date: new Date(84, 5, 12),
          arr: [101, 'dude', new Date(82, 10, 4)],
          deep: {
            str: obj.str,
            int: int,
            arr: obj.arr,
            date: new Date(81, 7, 4)
          }
        }
      };
    });
    describe('should merge string with:', function() {
      it('string', function() {
        var ori, target;
        ori = 'what u gonna say';
        target = extend(ori, str);
        ori.should.eql('what u gonna say');
        str.should.eql('me a test');
        return target.should.eql({
          '0': 'm',
          '1': 'e',
          '2': ' ',
          '3': 'a',
          '4': ' ',
          '5': 't',
          '6': 'e',
          '7': 's',
          '8': 't'
        });
      });
      it('number', function() {
        var ori, target;
        ori = 'what u gonna say';
        target = extend(ori, int);
        ori.should.eql('what u gonna say');
        int.should.eql(10);
        return target.should.eql({});
      });
      it('array', function() {
        var ori, target;
        ori = 'what u gonna say';
        target = extend(ori, arr);
        ori.should.eql('what u gonna say');
        arr.should.eql([1, 'what', new Date(81, 8, 4)]);
        return target.should.eql({
          '0': 1,
          '1': 'what',
          '2': new Date(81, 8, 4)
        });
      });
      it('date', function() {
        var ori, target;
        ori = 'what u gonna say';
        target = extend(ori, date);
        ori.should.eql('what u gonna say');
        date.should.eql(new Date(81, 4, 13));
        return target.should.eql(new Date(81, 4, 13));
      });
      return it('object', function() {
        var ori, target;
        ori = 'what u gonna say';
        target = extend(ori, obj);
        ori.should.eql('what u gonna say');
        obj.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
        return target.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
      });
    });
    describe('should merge number with:', function() {
      it('string', function() {
        var ori, target;
        ori = 20;
        target = extend(ori, str);
        ori.should.eql(20);
        str.should.eql('me a test');
        return target.should.eql({
          '0': 'm',
          '1': 'e',
          '2': ' ',
          '3': 'a',
          '4': ' ',
          '5': 't',
          '6': 'e',
          '7': 's',
          '8': 't'
        });
      });
      it('number', function() {
        var ori, target;
        ori = 20;
        target = extend(ori, int);
        ori.should.eql(20);
        int.should.eql(10);
        return target.should.eql({});
      });
      it('array', function() {
        var ori, target;
        ori = 20;
        target = extend(ori, arr);
        ori.should.eql(20);
        arr.should.eql([1, 'what', new Date(81, 8, 4)]);
        return target.should.eql({
          '0': 1,
          '1': 'what',
          '2': new Date(81, 8, 4)
        });
      });
      it('date', function() {
        var ori, target;
        ori = 20;
        target = extend(ori, date);
        ori.should.eql(20);
        date.should.eql(new Date(81, 4, 13));
        return target.should.eql(new Date(81, 4, 13));
      });
      return it('object', function() {
        var ori, target;
        ori = 20;
        target = extend(ori, obj);
        ori.should.eql(20);
        obj.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
        return target.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
      });
    });
    describe('should merge array with:', function() {
      it('string', function() {
        var ori, target;
        ori = [1, 2, 3, 4, 5, 6];
        target = extend(ori, str);
        ori.should.eql(['m', 'e', ' ', 'a', ' ', 't', 'e', 's', 't']);
        str.should.eql('me a test');
        return target.should.eql({
          '0': 'm',
          '1': 'e',
          '2': ' ',
          '3': 'a',
          '4': ' ',
          '5': 't',
          '6': 'e',
          '7': 's',
          '8': 't'
        });
      });
      it('number', function() {
        var ori, target;
        ori = [1, 2, 3, 4, 5, 6];
        target = extend(ori, int);
        ori.should.eql([1, 2, 3, 4, 5, 6]);
        int.should.eql(10);
        return target.should.eql([1, 2, 3, 4, 5, 6]);
      });
      it('array', function() {
        var ori, target;
        ori = [1, 2, 3, 4, 5, 6];
        target = extend(ori, arr);
        ori.should.eql([1, 'what', new Date(81, 8, 4), 4, 5, 6]);
        arr.should.eql([1, 'what', new Date(81, 8, 4)]);
        return target.should.eql([1, 'what', new Date(81, 8, 4), 4, 5, 6]);
      });
      it('date', function() {
        var ori, target;
        ori = [1, 2, 3, 4, 5, 6];
        target = extend(ori, date);
        ori.should.eql([1, 2, 3, 4, 5, 6]);
        date.should.eql(new Date(81, 4, 13));
        return target.should.eql([1, 2, 3, 4, 5, 6]);
      });
      return it('object', function() {
        var ori, target;
        ori = [1, 2, 3, 4, 5, 6];
        target = extend(ori, obj);
        ori.length.should.equal(6);
        ori['str'].should.eql('me a test');
        ori['int'].should.eql(10);
        ori['arr'].should.eql([1, 'what', new Date(81, 8, 4)]);
        ori['date'].should.eql(new Date(81, 4, 13));
        obj.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
        target.length.should.equal(6);
        target['str'].should.eql('me a test');
        target['int'].should.eql(10);
        target['arr'].should.eql([1, 'what', new Date(81, 8, 4)]);
        return target['date'].should.eql(new Date(81, 4, 13));
      });
    });
    describe('should merge date with:', function() {
      it('string', function() {
        var ori, target;
        ori = new Date(81, 9, 20);
        target = extend(ori, str);
        ori.should.eql({
          '0': 'm',
          '1': 'e',
          '2': ' ',
          '3': 'a',
          '4': ' ',
          '5': 't',
          '6': 'e',
          '7': 's',
          '8': 't'
        });
        str.should.eql('me a test');
        return target.should.eql({
          '0': 'm',
          '1': 'e',
          '2': ' ',
          '3': 'a',
          '4': ' ',
          '5': 't',
          '6': 'e',
          '7': 's',
          '8': 't'
        });
      });
      it('number', function() {
        var ori, target;
        ori = new Date(81, 9, 20);
        target = extend(ori, int);
        ori.should.eql({});
        int.should.eql(10);
        return target.should.eql({});
      });
      it('array', function() {
        var ori, target;
        ori = new Date(81, 9, 20);
        target = extend(ori, arr);
        ori.should.eql([1, 'what', new Date(81, 8, 4)]);
        int.should.eql(10);
        return target.should.eql([1, 'what', new Date(81, 8, 4)]);
      });
      it('date', function() {
        var ori, target;
        ori = new Date(81, 9, 20);
        target = extend(ori, date);
        ori.should.eql({});
        date.should.eql(new Date(81, 4, 13));
        return target.should.eql({});
      });
      return it('object', function() {
        var ori, target;
        ori = new Date(81, 9, 20);
        target = extend(ori, obj);
        ori.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
        obj.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
        return target.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
      });
    });
    describe('should merge object with:', function() {
      it('string', function() {
        var ori, target;
        ori = {
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        };
        target = extend(ori, str);
        ori.should.eql({
          '0': 'm',
          '1': 'e',
          '2': ' ',
          '3': 'a',
          '4': ' ',
          '5': 't',
          '6': 'e',
          '7': 's',
          '8': 't',
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        });
        str.should.eql('me a test');
        return target.should.eql({
          '0': 'm',
          '1': 'e',
          '2': ' ',
          '3': 'a',
          '4': ' ',
          '5': 't',
          '6': 'e',
          '7': 's',
          '8': 't',
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        });
      });
      it('number', function() {
        var ori, target;
        ori = {
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        };
        target = extend(ori, int);
        ori.should.eql({
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        });
        int.should.eql(10);
        return target.should.eql({
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        });
      });
      it('array', function() {
        var ori, target;
        ori = {
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        };
        target = extend(ori, arr);
        ori.should.eql({
          '0': 1,
          '1': 'what',
          '2': new Date(81, 8, 4),
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        });
        arr.should.eql([1, 'what', new Date(81, 8, 4)]);
        return target.should.eql({
          '0': 1,
          '1': 'what',
          '2': new Date(81, 8, 4),
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        });
      });
      it('date', function() {
        var ori, target;
        ori = {
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        };
        target = extend(ori, date);
        ori.should.eql({
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        });
        date.should.eql(new Date(81, 4, 13));
        return target.should.eql({
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        });
      });
      return it('object', function() {
        var ori, target;
        ori = {
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        };
        target = extend(ori, obj);
        ori.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
        obj.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
        return target.should.eql({
          str: 'me a test',
          int: 10,
          arr: [1, 'what', new Date(81, 8, 4)],
          date: new Date(81, 4, 13)
        });
      });
    });
    describe('should make deep clone: ', function() {
      return it('object with object', function() {
        var ori, target;
        ori = {
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26)
        };
        target = extend(true, ori, deep);
        ori.should.eql({
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26),
          ori: {
            str: 'me a test',
            int: 10,
            arr: [1, 'what', new Date(81, 8, 4)],
            date: new Date(81, 4, 13)
          },
          layer: {
            int: 10,
            str: 'str',
            date: new Date(84, 5, 12),
            arr: [101, 'dude', new Date(82, 10, 4)],
            deep: {
              str: 'me a test',
              int: 10,
              arr: [1, 'what', new Date(81, 8, 4)],
              date: new Date(81, 7, 4)
            }
          }
        });
        deep.should.eql({
          ori: {
            str: 'me a test',
            int: 10,
            arr: [1, 'what', new Date(81, 8, 4)],
            date: new Date(81, 4, 13)
          },
          layer: {
            int: 10,
            str: 'str',
            date: new Date(84, 5, 12),
            arr: [101, 'dude', new Date(82, 10, 4)],
            deep: {
              str: 'me a test',
              int: 10,
              arr: [1, 'what', new Date(81, 8, 4)],
              date: new Date(81, 7, 4)
            }
          }
        });
        target.should.eql({
          str: 'no shit',
          int: 76,
          arr: [1, 2, 3, 4],
          date: new Date(81, 7, 26),
          ori: {
            str: 'me a test',
            int: 10,
            arr: [1, 'what', new Date(81, 8, 4)],
            date: new Date(81, 4, 13)
          },
          layer: {
            int: 10,
            str: 'str',
            date: new Date(84, 5, 12),
            arr: [101, 'dude', new Date(82, 10, 4)],
            deep: {
              str: 'me a test',
              int: 10,
              arr: [1, 'what', new Date(81, 8, 4)],
              date: new Date(81, 7, 4)
            }
          }
        });
        target.layer.deep = 339;
        return deep.should.eql({
          ori: {
            str: 'me a test',
            int: 10,
            arr: [1, 'what', new Date(81, 8, 4)],
            date: new Date(81, 4, 13)
          },
          layer: {
            int: 10,
            str: 'str',
            date: new Date(84, 5, 12),
            arr: [101, 'dude', new Date(82, 10, 4)],
            deep: {
              str: 'me a test',
              int: 10,
              arr: [1, 'what', new Date(81, 8, 4)],
              date: new Date(81, 7, 4)
            }
          }
        });
      });

      /*
      NEVER USE EXTEND WITH THE ABOVE SITUATION
       */
    });
    return describe('must pass additional test: ', function() {
      return it('should merge objects with \'null\' and \'undefined\'', function() {
        var additional, ori, target;
        ori = {
          a: 10,
          b: null,
          c: 'test data',
          d: void 0
        };
        additional = {
          x: 'googol',
          y: 8939843,
          z: null,
          az: void 0
        };
        target = extend(ori, additional);
        return target.should.to.be.eql({
          a: 10,
          b: null,
          c: 'test data',
          d: void 0,
          x: 'googol',
          y: 8939843,
          z: null,
          az: void 0
        });
      });
    });
  });

}).call(this);
